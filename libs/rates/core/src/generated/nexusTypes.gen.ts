/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */

import * as commonTypes from '@raptorsystems/krypto-rates-common/src/types'
import * as sourceTypes from '@raptorsystems/krypto-rates-sources/src/types'
import { Context } from './../context'
import { core } from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
     */
    currency<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "Currency";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.CommonInputFieldConfig<TypeName, FieldName>,
    ): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
     */
    currency<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Currency";
    /**
     * A date string, such as 2007-12-03, compliant with the `full-date` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
     */
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Date";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MarketDateInput: {
    // input type
    date: NexusGenScalars['Date'] // Date!
    market: NexusGenInputs['MarketInput'] // MarketInput!
  }
  MarketInput: {
    // input type
    base: NexusGenScalars['Currency'] // Currency!
    quote: NexusGenScalars['Currency'] // Currency!
  }
  MarketTimeframeInput: {
    // input type
    market: NexusGenInputs['MarketInput'] // MarketInput!
    timeframe: NexusGenInputs['TimeframeInput'] // TimeframeInput!
  }
  TimeframeInput: {
    // input type
    end: NexusGenScalars['Date'] // Date!
    start: NexusGenScalars['Date'] // Date!
  }
}

export interface NexusGenEnums {}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Currency: string
  Date: Date
}

export interface NexusGenObjects {
  Market: {
    // root type
    base: NexusGenScalars['Currency'] // Currency!
    quote: NexusGenScalars['Currency'] // Currency!
  }
  Query: {}
  Rate: sourceTypes.Rate
}

export interface NexusGenInterfaces {}

export interface NexusGenUnions {}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Market: {
    // field return type
    base: NexusGenScalars['Currency'] // Currency!
    quote: NexusGenScalars['Currency'] // Currency!
  }
  Query: {
    // field return type
    currencies: string[] // [String!]!
    historicalRateForDate: NexusGenRootTypes['Rate'] | null // Rate
    historicalRatesByDate: NexusGenRootTypes['Rate'][] | null // [Rate!]
    historicalRatesByTimeframe: NexusGenRootTypes['Rate'][] | null // [Rate!]
    historicalRatesForDate: NexusGenRootTypes['Rate'][] | null // [Rate!]
    historicalRatesForDates: NexusGenRootTypes['Rate'][] | null // [Rate!]
    historicalRatesForTimeframe: NexusGenRootTypes['Rate'][] | null // [Rate!]
    liveRate: NexusGenRootTypes['Rate'] | null // Rate
    liveRates: NexusGenRootTypes['Rate'][] | null // [Rate!]
  }
  Rate: {
    // field return type
    bridged: boolean // Boolean!
    date: NexusGenScalars['Date'] // Date!
    market: NexusGenRootTypes['Market'] // Market!
    source: string // String!
    timestamp: number // Int!
    value: number | null // Float
  }
}

export interface NexusGenFieldTypeNames {
  Market: {
    // field return type name
    base: 'Currency'
    quote: 'Currency'
  }
  Query: {
    // field return type name
    currencies: 'String'
    historicalRateForDate: 'Rate'
    historicalRatesByDate: 'Rate'
    historicalRatesByTimeframe: 'Rate'
    historicalRatesForDate: 'Rate'
    historicalRatesForDates: 'Rate'
    historicalRatesForTimeframe: 'Rate'
    liveRate: 'Rate'
    liveRates: 'Rate'
  }
  Rate: {
    // field return type name
    bridged: 'Boolean'
    date: 'Date'
    market: 'Market'
    source: 'String'
    timestamp: 'Int'
    value: 'Float'
  }
}

export interface NexusGenArgTypes {
  Query: {
    historicalRateForDate: {
      // args
      date: NexusGenScalars['Date'] // Date!
      market: NexusGenInputs['MarketInput'] // MarketInput!
    }
    historicalRatesByDate: {
      // args
      marketDates: NexusGenInputs['MarketDateInput'][] // [MarketDateInput!]!
    }
    historicalRatesByTimeframe: {
      // args
      marketTimeframes: NexusGenInputs['MarketTimeframeInput'][] // [MarketTimeframeInput!]!
    }
    historicalRatesForDate: {
      // args
      date: NexusGenScalars['Date'] // Date!
      markets: NexusGenInputs['MarketInput'][] // [MarketInput!]!
    }
    historicalRatesForDates: {
      // args
      dates: NexusGenScalars['Date'][] // [Date!]!
      markets: NexusGenInputs['MarketInput'][] // [MarketInput!]!
    }
    historicalRatesForTimeframe: {
      // args
      markets: NexusGenInputs['MarketInput'][] // [MarketInput!]!
      timeframe: NexusGenInputs['TimeframeInput'] // TimeframeInput!
    }
    liveRate: {
      // args
      market: NexusGenInputs['MarketInput'] // MarketInput!
      ttl: number | null // Int
    }
    liveRates: {
      // args
      markets: NexusGenInputs['MarketInput'][] // [MarketInput!]!
      ttl: number | null // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {}

export interface NexusGenTypeInterfaces {}

export type NexusGenObjectNames = keyof NexusGenObjects

export type NexusGenInputNames = keyof NexusGenInputs

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames = keyof NexusGenScalars

export type NexusGenUnionNames = never

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never

export type NexusGenAbstractsUsingStrategyResolveType = never

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  fieldTypeNames: NexusGenFieldTypeNames
  allTypes: NexusGenAllTypes
  typeInterfaces: NexusGenTypeInterfaces
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractTypeMembers: NexusGenAbstractTypeMembers
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType
  features: NexusGenFeaturesConfig
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginInputFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
  interface NexusGenPluginArgConfig {}
}
