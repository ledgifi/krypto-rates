/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as Context from '../src/context'
import * as types from '@raptorsystems/krypto-rates-common/types'
import { core } from 'nexus'
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    currency<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<'inputTypes', TypeName, FieldName>
      >,
    ): void // "Currency";
    date<FieldName extends string>(
      fieldName: FieldName,
      opts?: core.ScalarInputFieldConfig<
        core.GetGen3<'inputTypes', TypeName, FieldName>
      >,
    ): void // "Date";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    currency<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Currency";
    date<FieldName extends string>(
      fieldName: FieldName,
      ...opts: core.ScalarOutSpread<TypeName, FieldName>
    ): void // "Date";
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  MarketInput: {
    // input type
    base: string // Currency!
    quote: string // Currency!
  }
  MarketsInput: {
    // input type
    base: string // Currency!
    quotes: string[] // [Currency!]!
  }
  TimeframeInput: {
    // input type
    end: Date // Date!
    start: Date // Date!
  }
}

export interface NexusGenEnums {}

export interface NexusGenRootTypes {
  Market: {
    // root type
    base: string // Currency!
    quote: string // Currency!
  }
  Query: {}
  Rate: types.Rate
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  Currency: string
  Date: Date
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  MarketInput: NexusGenInputs['MarketInput']
  MarketsInput: NexusGenInputs['MarketsInput']
  TimeframeInput: NexusGenInputs['TimeframeInput']
}

export interface NexusGenFieldTypes {
  Market: {
    // field return type
    base: string // Currency!
    quote: string // Currency!
  }
  Query: {
    // field return type
    currencies: string[] // [String!]!
    historicalRate: NexusGenRootTypes['Rate'] | null // Rate
    historicalRates: NexusGenRootTypes['Rate'][] | null // [Rate!]
    liveRate: NexusGenRootTypes['Rate'] | null // Rate
    liveRates: NexusGenRootTypes['Rate'][] | null // [Rate!]
    timeframeRates: NexusGenRootTypes['Rate'][] | null // [Rate!]
  }
  Rate: {
    // field return type
    date: Date // Date!
    market: NexusGenRootTypes['Market'] // Market!
    source: string // String!
    timestamp: number // Int!
    value: number // Float!
  }
}

export interface NexusGenArgTypes {
  Query: {
    historicalRate: {
      // args
      date: Date // Date!
      market: NexusGenInputs['MarketInput'] // MarketInput!
    }
    historicalRates: {
      // args
      date: Date // Date!
      markets: NexusGenInputs['MarketsInput'] // MarketsInput!
    }
    liveRate: {
      // args
      market: NexusGenInputs['MarketInput'] // MarketInput!
      ttl?: number | null // Int
    }
    liveRates: {
      // args
      markets: NexusGenInputs['MarketsInput'] // MarketsInput!
      ttl?: number | null // Int
    }
    timeframeRates: {
      // args
      markets: NexusGenInputs['MarketsInput'] // MarketsInput!
      timeframe: NexusGenInputs['TimeframeInput'] // TimeframeInput!
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = 'Market' | 'Query' | 'Rate'

export type NexusGenInputNames =
  | 'MarketInput'
  | 'MarketsInput'
  | 'TimeframeInput'

export type NexusGenEnumNames = never

export type NexusGenInterfaceNames = never

export type NexusGenScalarNames =
  | 'Boolean'
  | 'Currency'
  | 'Date'
  | 'Float'
  | 'ID'
  | 'Int'
  | 'String'

export type NexusGenUnionNames = never

export interface NexusGenTypes {
  context: Context.Context
  inputTypes: NexusGenInputs
  rootTypes: NexusGenRootTypes
  argTypes: NexusGenArgTypes
  fieldTypes: NexusGenFieldTypes
  allTypes: NexusGenAllTypes
  inheritedFields: NexusGenInheritedFields
  objectNames: NexusGenObjectNames
  inputNames: NexusGenInputNames
  enumNames: NexusGenEnumNames
  interfaceNames: NexusGenInterfaceNames
  scalarNames: NexusGenScalarNames
  unionNames: NexusGenUnionNames
  allInputTypes:
    | NexusGenTypes['inputNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['scalarNames']
  allOutputTypes:
    | NexusGenTypes['objectNames']
    | NexusGenTypes['enumNames']
    | NexusGenTypes['unionNames']
    | NexusGenTypes['interfaceNames']
    | NexusGenTypes['scalarNames']
  allNamedTypes:
    | NexusGenTypes['allInputTypes']
    | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames']
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes
}

declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {}
  interface NexusGenPluginFieldConfig<
    TypeName extends string,
    FieldName extends string
  > {}
  interface NexusGenPluginSchemaConfig {}
}
